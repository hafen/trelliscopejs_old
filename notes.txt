# Errors on handling EMFILE Error
main issue here:            https://github.com/substack/node-browserify/issues/431
actually being solved here: https://github.com/substack/node-browserify/issues/1003
Fix:
  ulimit -n 2048


# Info on url hashing
https://github.com/browserstate/history.js/wiki/Intelligent-State-Handling
# we can do this solution right now as we do not have a server.  If we had a server, we could do regular urls.


# Neat Tools
https://github.com/facebook/react/wiki/Complementary-Tools


# Rules to live by
https://github.com/planningcenter/react-patterns
  1. Formatting Props - Wrap props on newlines for exactly 2 or more.
    Person({firstName: "Michael"})
    Person {
      firstName: "Michael"
      lastName:  "Jordan"
    }
  2. Computed Props - Name computed prop methods with the get prefix.
    getFullName: ->
      "#{@props.firstName} #{@props.lastname}"
  3. Compound State - Name compound state methods with the is, has or can prefix. These methods should return a boolean value.
    isWillingSongParticipant: ->
      @state.happy and @state.knowsIt
  4. Sub-render - Use sub-render methods to isolate logical chunks of component UI.
    render: ->
      React.DOM.ul(null, @renderItems())

    renderItems: ->
      for itemText in @props.items
        React.DOM.li(null, itemText)
  5. Cached State in render - Do not keep state in render
    getFormattedBirthDate: ->
      moment(@props.user.bday).format(LL);
    render: ->
      React.DOM.div(null, @getFormattedBirthDate())
  6. Compound Conditions - Do not put compound conditions in render.
    isLikeTotallyHappy: ->
      @state.happy and @state.knowsIt
    render: ->
      if @isLikeTotallyHappy()
        React.DOM.div(null, "Knows what it's all about.")
  7. Naming Handler Methods - Name the handler methods after their triggering event. Handler names should: begin with handle, end with the name of the event they handle (eg, Click, Change), and be present-tense
    # good
    render: ->
      React.DOM.div
        onClick: @handleClick




# create mock http api
http://www.ember-cli.com/#mocks-and-fixtures
ember g http-mock posts # for posts


# good literal coffeescript app
https://github.com/mjm/eats/blob/master/client/js/view/eats.litcoffee


# flux todo MVC
https://github.com/facebook/flux/tree/master/examples/flux-todomvc
http://facebook.github.io/flux/docs/todo-list.html
file:///Users/barret/Dropbox/school/research/git/trelliscopejs/flux/examples/flux-todomvc/index.html


# react boilerplate
https://github.com/petehunt/react-boilerplate


# flux chat tutorial videos
http://facebook.github.io/flux/docs/chat.html#content


# react router
http://andreypopp.viewdocs.io/react-router-component


# react "hello world" app
http://facebook.github.io/react/docs/getting-started.html

# notes about live-reload within broccoli
https://github.com/mklabs/tiny-lr
https://github.com/broccolijs/broccoli/blob/master/lib/server.js#L32
http://feedback.livereload.com/knowledgebase/articles/86180-how-do-i-add-the-script-tag-manually-


# Things to know before starting a reasonably large-scale React.js project?
http://www.reddit.com/r/javascript/comments/2la0l7/things_to_know_before_starting_a_reasonably/
